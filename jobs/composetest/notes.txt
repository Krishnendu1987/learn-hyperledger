# Setup :Create a directory for the project:
$ mkdir composetest
$ cd composetest
# Setup :Create a file called app.py in your project directory and paste this in:
# Setup :Create another file called requirements.txt in your project directory and paste this in:

# Create Docker File
# In your project directory, create a file named Dockerfile and paste the following:
/*
FROM python:3.4-alpine
ADD . /code
WORKDIR /code
RUN pip install -r requirements.txt
CMD ["python", "app.py"]
/*

#This tells Docker to:

#    Build an image starting with the Python 3.4 image.
#    Add the current directory . into the path /code in the image.
#    Set the working directory to /code.
#    Install the Python dependencies.
#    Set the default command for the container to python app.py.

# Define services in a Compose file

# Create a file called docker-compose.yml in your project directory and paste the following:

/*
version: '3'
services:
  web:
    build: .
    ports:
     - "5000:5000"
  redis:
    image: "redis:alpine"
*/

#This Compose file defines two services, web and redis. The web service:

#    Uses an image that’s built from the Dockerfile in the current directory.
#    Forwards the exposed port 5000 on the container to port 5000 on the host machine. We use the default port for the Flask web server, 5000.

#The redis service uses a public Redis image pulled from the Docker Hub registry.

# Build and run your app with Compose

# From your project directory, start up your application by running docker-compose up.
$ docker-compose up
# Enter http://0.0.0.0:5000/ in a browser to see the application running.

# Switch to another terminal window, and type docker image ls to list local images.
# Listing images at this point should return redis and web.
$ docker image ls

# Stop the application, either by running docker-compose down from within your project directory in the second terminal, or by hitting CTRL+C in the original terminal where you started the app.

# Edit the Compose file to add a bind mount

# Edit docker-compose.yml in your project directory to add a bind mount for the web service:

/*
version: '3'
services:
  web:
    build: .
    ports:
     - "5000:5000"
    volumes:
     - .:/code
  redis:
    image: "redis:alpine"
*/

# The new volumes key mounts the project directory (current directory) on the host to /code inside the container, allowing you to modify the code on the fly, without having to rebuild the image.

# Re-build and run the app with Compose
# From your project directory, type docker-compose up to build the app with the updated Compose file, and run it.

$ docker-compose up

# Update the application

# Change the greeting in app.py and save it. For example, change the Hello World! message to Hello from Docker!:
return 'Hello from Docker! I have been seen {} times.\n'.format(count)
# Refresh the app in your browser. The greeting should be updated, and the counter should still be incrementing.

# Experiment with some other commands
# If you want to run your services in the background, you can pass the -d flag (for “detached” mode) to docker-compose up and use docker-compose ps to see what is currently running:
$ docker-compose up -d
$ docker-compose ps
# The docker-compose run command allows you to run one-off commands for your services. For example, to see what environment variables are available to the web service:
$ docker-compose run web env
# If you started Compose with docker-compose up -d, stop your services once you’ve finished with them:
$ docker-compose stop
# You can bring everything down, removing the containers entirely, with the down command. Pass --volumes to also remove the data volume used by the Redis container:
$ docker-compose down --volumes
